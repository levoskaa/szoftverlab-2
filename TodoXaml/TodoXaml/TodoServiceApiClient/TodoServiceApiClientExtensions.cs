// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace TodoXaml.TodoServiceApi
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for TodoServiceApiClient.
    /// </summary>
    public static partial class TodoServiceApiClientExtensions
    {
            /// <summary>
            /// Az összes teendő lekérdezése
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<TodoItem> GetTodos(this ITodoServiceApiClient operations)
            {
                return Task.Factory.StartNew(s => ((ITodoServiceApiClient)s).GetTodosAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Az összes teendő lekérdezése
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TodoItem>> GetTodosAsync(this ITodoServiceApiClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTodosWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Új teendő felvétele a listába
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Az felvenni kívánt új teendő adatai
            /// </param>
            public static TodoItem AddTodo(this ITodoServiceApiClient operations, TodoItem body = default(TodoItem))
            {
                return Task.Factory.StartNew(s => ((ITodoServiceApiClient)s).AddTodoAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Új teendő felvétele a listába
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Az felvenni kívánt új teendő adatai
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TodoItem> AddTodoAsync(this ITodoServiceApiClient operations, TodoItem body = default(TodoItem), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddTodoWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Egy teendő lekérdezése a megadott azonosítóval
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Lekérdezendő teendő azonosítója
            /// </param>
            public static TodoItem GetTodo(this ITodoServiceApiClient operations, int id)
            {
                return Task.Factory.StartNew(s => ((ITodoServiceApiClient)s).GetTodoAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Egy teendő lekérdezése a megadott azonosítóval
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Lekérdezendő teendő azonosítója
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TodoItem> GetTodoAsync(this ITodoServiceApiClient operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTodoWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Megadott azonosítóval rendelkező teendő módosítása
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Módosítandó teendő azonosítója
            /// </param>
            /// <param name='body'>
            /// Módosítandó teendő adatai
            /// </param>
            public static TodoItem UpdateTodo(this ITodoServiceApiClient operations, int id, TodoItem body = default(TodoItem))
            {
                return Task.Factory.StartNew(s => ((ITodoServiceApiClient)s).UpdateTodoAsync(id, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Megadott azonosítóval rendelkező teendő módosítása
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Módosítandó teendő azonosítója
            /// </param>
            /// <param name='body'>
            /// Módosítandó teendő adatai
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TodoItem> UpdateTodoAsync(this ITodoServiceApiClient operations, int id, TodoItem body = default(TodoItem), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTodoWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Megadott azonosítóval rendelkező teendő törlése
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Törlendő teendő azonosítója
            /// </param>
            public static void DeleteTodo(this ITodoServiceApiClient operations, int id)
            {
                Task.Factory.StartNew(s => ((ITodoServiceApiClient)s).DeleteTodoAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Megadott azonosítóval rendelkező teendő törlése
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Törlendő teendő azonosítója
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteTodoAsync(this ITodoServiceApiClient operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteTodoWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
